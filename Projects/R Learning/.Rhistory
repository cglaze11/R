my_chisq(m2)
my_chisq <- function(x){
# input:
# x:a matrix
n.row <- nrow(x)
n.col <- ncol(x)
df <- (n.row-1)*(n.col-1)
# the sum of row
r <- tibble()
# the sum of col
c <- tibble()
for (i in 1:n.row ) {
r[1,i] <- sum(x[i,1:n.col])
}
for (i in 1:n.col ) {
c[1,i] <- sum(x[1:n.row,i])
}
total <- sum(x)
# 2×2 tables
if (n.row==2 & n.col==2) {
stat <- ((abs(x[1,1]*x[2,2]-x[1,2]*x[2,1])-total/2)**2*total/(r[1,1]*r[1,2]*c[1,1]*c[1,2]))[1,1]
}
# 2×c tables
else if(n.row==2 & n.col>=3) {
oc <- tibble()
for (j in 1:n.col){
oc[1,j] <- x[1,j]**2/c[1,j]
}
stat <- ((total**2/r[1,1]/r[1,2])*(sum(oc)-r[1,1]**2/total))[1,1]
}
# r×c tables
else if (n.row>=2 & n.col>=3) {
orc <- tibble()
for (i in 1:n.row){
for (j in 1:n.col){
orc[i,j] <- x[i,j]**2/r[1,i]/c[1,j]
}
}
stat <- total*(sum(orc)-1)
}
# return(attributes(stat))
# return(stat)
# stat <- stat[1,1]
p.value <- 1 - pchisq(stat, df=df, ncp=0, log = FALSE)
# stat
# p.value
result <- list(stat=stat,pvalue=p.value)
return(result)
}
my_chisq(m)
my_chisq(m1)
my_chisq(m2)
my_chisq(m)[1]
my_chisq(m)$stat
my_chisq <- function(x){
# input:
# x:a matrix
n.row <- nrow(x)
n.col <- ncol(x)
df <- (n.row-1)*(n.col-1)
# the sum of row
r <- tibble()
# the sum of col
c <- tibble()
for (i in 1:n.row ) {
r[1,i] <- sum(x[i,1:n.col])
}
for (i in 1:n.col ) {
c[1,i] <- sum(x[1:n.row,i])
}
total <- sum(x)
# 2×2 tables
if (n.row==2 & n.col==2) {
stat <- ((abs(x[1,1]*x[2,2]-x[1,2]*x[2,1])-total/2)**2*total/(r[1,1]*r[1,2]*c[1,1]*c[1,2]))[1,1]
}
# 2×c tables
else if(n.row==2 & n.col>=3) {
oc <- tibble()
for (j in 1:n.col){
oc[1,j] <- x[1,j]**2/c[1,j]
}
stat <- ((total**2/r[1,1]/r[1,2])*(sum(oc)-r[1,1]**2/total))[1,1]
}
# r×c tables
else if (n.row>=2 & n.col>=3) {
orc <- tibble()
for (i in 1:n.row){
for (j in 1:n.col){
orc[i,j] <- x[i,j]**2/r[1,i]/c[1,j]
}
}
stat <- total*(sum(orc)-1)
}
p.value <- 1 - pchisq(stat, df=df, ncp=0, log = FALSE)
# result <- list(stat=stat,pvalue=p.value)
result <- c(stat,p.value)
return(result)
}
my_chisq(m)
my_chisq(m1)
my_chisq(m2)
my_chisq(m)[1]
my_chisq(m)[2]
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
library(tidyverse)
This is a document that records the whole process of the function:[func_chisq](/home/xinlong.yang/Projects/R Learning/Functions/func_chisq.R).
my_chisq <- function(x){
# input:
# x:a matrix
n.row <- nrow(x)
n.col <- ncol(x)
df <- (n.row-1)*(n.col-1)
# the sum of row
r <- tibble()
# the sum of col
c <- tibble()
for (i in 1:n.row ) {
r[1,i] <- sum(x[i,1:n.col])
}
for (i in 1:n.col ) {
c[1,i] <- sum(x[1:n.row,i])
}
total <- sum(x)
# 2×2 tables
if (n.row==2 & n.col==2) {
stat <- ((abs(x[1,1]*x[2,2]-x[1,2]*x[2,1])-total/2)**2*total/(r[1,1]*r[1,2]*c[1,1]*c[1,2]))[1,1]
}
# 2×c tables
else if(n.row==2 & n.col>=3) {
oc <- tibble()
for (j in 1:n.col){
oc[1,j] <- x[1,j]**2/c[1,j]
}
stat <- ((total**2/r[1,1]/r[1,2])*(sum(oc)-r[1,1]**2/total))[1,1]
}
# r×c tables
else if (n.row>=2 & n.col>=3) {
orc <- tibble()
for (i in 1:n.row){
for (j in 1:n.col){
orc[i,j] <- x[i,j]**2/r[1,i]/c[1,j]
}
}
stat <- total*(sum(orc)-1)
}
p.value <- 1 - pchisq(stat, df=df, ncp=0, log = FALSE)
# result <- list(stat=stat,pvalue=p.value)
result <- c(stat,p.value)
return(result)
}
m <- as.table(rbind(c(50, 250), c(5, 195)))
dimnames(m) <- list(gender = c("F", "M"),
party = c("Democrat","Independent"))
m <- as.table(rbind(c(50, 250), c(5, 195)))
dimnames(m) <- list(gender = c("F", "M"),
party = c("Democrat","Independent"))
m
m <- as.table(rbind(c(50, 250), c(5, 195)))
dimnames(m) <- list(gender = c("F", "M"),
party = c("Democrat","Independent"))
m
my_chisq(m)
c("The Validation Data")
m <- as.table(rbind(c(50, 250), c(5, 195)))
dimnames(m) <- list(gender = c("F", "M"),
party = c("Democrat","Independent"))
m
c("The Validation Data")
m1 <- as.table(rbind(c(37,49,23), c(150,100,57)))
dimnames(m1) <- list(gender = c("F", "M"),party = c("Democrat","Independent","Others"))
m1
my_chisq(m1)
r <- tibble()
c <- tibble()
for (i in 1:n.row ) {
r[1,i] <- sum(x[i,1:n.col])
}
?sum
m <- as.table(rbind(c(50, 250), c(5, 195)))
dimnames(m) <- list(gender = c("F", "M"),
party = c("Democrat","Independent"))
m <- as.matrix(m)
colSums(m)
colSums(m)
rowSums(m)
colSums(m)[1]
colSums(m)[1,2]
c <- as_tibble(colSums(m))
c
c[1]
c[1,1]
c[1,2]
c[2,1]
c <- as_vector(colSums(m))
c[2,1]
c[2]
c[1]
c <- colSums(m)
c
c[1]
c[1,2]
# test 1
m <- as.table(rbind(c(50, 250), c(5, 195)))
dimnames(m) <- list(gender = c("F", "M"),
party = c("Democrat","Independent"))
m <- as.matrix(m)
# test 2
m1 <- as.table(rbind(c(37,49,23), c(150,100,57)))
dimnames(m1) <- list(gender = c("F", "M"),
party = c("Democrat","Independent","Others"))
m1 <- as.matrix(m1)
# test 3
m2 <- as.table(rbind(c(67,9,10,5), c(32,23,20,4),c(10,11,23,5)))
dimnames(m2) <- list(gender = c("F", "M","O"),
party = c("Democrat","Independent","Others","None"))
m2 <- as.matrix(m2)
my_chisq <- function(x){
# input:
# x:a matrix
n.row <- nrow(x)
n.col <- ncol(x)
df <- (n.row-1)*(n.col-1)
# the sum of row
r <- rowSums(x)
# the sum of col
c <- colSums(x)
total <- sum(x)
# 2×2 tables
if (n.row==2 & n.col==2) {
stat <- ((abs(x[1,1]*x[2,2]-x[1,2]*x[2,1])-total/2)**2*total/(r[1]*r[2]*c[1]*c[2]))[1,1]
}
# 2×c tables
else if(n.row==2 & n.col>=3) {
oc <- tibble()
for (j in 1:n.col){
oc[1,j] <- x[1,j]**2/c[j]
}
stat <- ((total**2/r[1]/r[2])*(sum(oc)-r[1]**2/total))[1,1]
}
# r×c tables
else if (n.row>=2 & n.col>=3) {
orc <- tibble()
for (i in 1:n.row){
for (j in 1:n.col){
orc[i,j] <- x[i,j]**2/r[i]/c[j]
}
}
stat <- total*(sum(orc)-1)
}
p.value <- 1 - pchisq(stat, df=df, ncp=0, log = FALSE)
# result <- list(stat=stat,pvalue=p.value)
result <- c(stat,p.value)
return(result)
}
my_chisq(m)
my_chisq(m1)
my_chisq(m2)
my_chisq <- function(x){
# input:
# x:a matrix
n.row <- nrow(x)
n.col <- ncol(x)
df <- (n.row-1)*(n.col-1)
# the sum of row
r <- rowSums(x)
# the sum of col
c <- colSums(x)
total <- sum(x)
# 2×2 tables
if (n.row==2 & n.col==2) {
stat <- ((abs(x[1,1]*x[2,2]-x[1,2]*x[2,1])-total/2)**2*total/(r[1]*r[2]*c[1]*c[2]))
}
# 2×c tables
else if(n.row==2 & n.col>=3) {
oc <- tibble()
for (j in 1:n.col){
oc[1,j] <- x[1,j]**2/c[j]
}
stat <- ((total**2/r[1]/r[2])*(sum(oc)-r[1]**2/total))
}
# r×c tables
else if (n.row>=2 & n.col>=3) {
orc <- tibble()
for (i in 1:n.row){
for (j in 1:n.col){
orc[i,j] <- x[i,j]**2/r[i]/c[j]
}
}
stat <- total*(sum(orc)-1)
}
p.value <- 1 - pchisq(stat, df=df, ncp=0, log = FALSE)
# result <- list(stat=stat,pvalue=p.value)
result <- c(stat,p.value)
return(result)
}
my_chisq(m)
my_chisq(m1)
my_chisq(m2)
my_chisq <- function(x){
# input:
# x:a matrix
n.row <- nrow(x)
n.col <- ncol(x)
df <- (n.row-1)*(n.col-1)
# the sum of row
r <- rowSums(x)
# the sum of col
c <- colSums(x)
total <- sum(x)
# 2×2 tables
if (n.row==2 & n.col==2) {
stat <- ((abs(x[1,1]*x[2,2]-x[1,2]*x[2,1])-total/2)**2*total/(r[1]*r[2]*c[1]*c[2]))[1]
}
# 2×c tables
else if(n.row==2 & n.col>=3) {
oc <- tibble()
for (j in 1:n.col){
oc[1,j] <- x[1,j]**2/c[j]
}
stat <- ((total**2/r[1]/r[2])*(sum(oc)-r[1]**2/total))[1]
}
# r×c tables
else if (n.row>=2 & n.col>=3) {
orc <- tibble()
for (i in 1:n.row){
for (j in 1:n.col){
orc[i,j] <- x[i,j]**2/r[i]/c[j]
}
}
stat <- total*(sum(orc)-1)
}
p.value <- 1 - pchisq(stat, df=df, ncp=0, log = FALSE)
# result <- list(stat=stat,pvalue=p.value)
result <- c(stat,p.value)
return(result)
}
my_chisq(m)
my_chisq(m1)
my_chisq(m2)
my_chisq <- function(x){
# input:
# x:a matrix
n.row <- nrow(x)
n.col <- ncol(x)
df <- (n.row-1)*(n.col-1)
# the sum of row
r <- rowSums(x)
# the sum of col
c <- colSums(x)
total <- sum(x)
# 2×2 tables
if (n.row==2 & n.col==2) {
stat <- ((abs(x[1,1]*x[2,2]-x[1,2]*x[2,1])-total/2)**2*total/(r[1]*r[2]*c[1]*c[2])) %>% as.vector()
}
# 2×c tables
else if(n.row==2 & n.col>=3) {
oc <- tibble()
for (j in 1:n.col){
oc[1,j] <- x[1,j]**2/c[j]
}
stat <- ((total**2/r[1]/r[2])*(sum(oc)-r[1]**2/total)) %>% as.vector()
}
# r×c tables
else if (n.row>=2 & n.col>=3) {
orc <- tibble()
for (i in 1:n.row){
for (j in 1:n.col){
orc[i,j] <- x[i,j]**2/r[i]/c[j]
}
}
stat <- total*(sum(orc)-1)
}
p.value <- 1 - pchisq(stat, df=df, ncp=0, log = FALSE)
# result <- list(stat=stat,pvalue=p.value)
result <- c(stat,p.value)
return(result)
}
my_chisq(m)
my_chisq(m1)
my_chisq(m2)
?as.vector
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
1/x
c(x,0,1/x)
c(x,0,1/x)[1]
c(x,0,1/x)[13]
4]
c(x,0,1/x)[14]
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
1/x
c <- c(x,0,1/x)
c[1]
c[14]
y <- x[!is.na(x)]
y
x[1:10]
# logical vector
x[!is.na(x)]
# logical vector
x[is.na(x)]
# logical vector
x[!is.na(x)]
# A vector of positive integral quantities
x[1:10]
c("x","y")[rep(c(1,2,2,1), times=4)]
rep(c(1,2,2,1), times=4)
c("x","y")[1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1]
c("x","y")[c(1 2 2 1 1 2 2 1 1 2 2 1 1 2 2 1)]
c("x","y")[c(1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1)]
rep(c(1,2,2,1), times=4)
rep(c(1,2,2,1), times=4) %>% attributes()
rep(c(1,2,2,1), times=4)
c(1,2,2,1,1,2,2,1,1,2,2,1,1,2,2,1)
?rep
# A vector of negative integral quantities.
x[-(1:5)]
# A vector of negative integral quantities.
x[-(1:4)]
# A vector of character strings
fruit <- c(5, 10, 1, 20)
names(fruit) <- c("orange", "banana", "apple", "peach")
lunch <- fruit[c("apple","orange")]
fruit[c("apple","orange")]
attributes(fruit)
fruit <- c(5, 10, 1, 20)
attributes(fruit)
names(fruit) <- c("orange", "banana", "apple", "peach")
fruit[c("apple","orange")]
attributes(fruit)
attr(z, "dim") <- c(10,10)
attr(x, "dim") <- c(10,10)
attr(fruit, "dim") <- c(10,10)
attr(fruit, "dim") <- c(2,2)
attr(fruit, "dim") <- c(2,2) %>% attributes()
z <- c(1:1500)
dim(z) <- c(3,5,100)
attributes(z)
z <- c(1:15)
z
dim(z) <- c(3,5)
z
z[1,2]
z <- c(1:15)
z
# convert a vector to a 3×5 array
# index with x[i,j]
dim(z) <- c(3,5)
attributes(z)
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
a <- c(1:10)
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
a <- c(1:8)
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
a <- c(1:8)
dim(a) <- c(2,4,1)
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
a <- c(1:8)
dim(a) <- c(2,4,2)
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
dim(a) <- c(2,4,2)
a <- c(1:16)
dim(a) <- c(2,4,2)
c(a[2,1,1], a[2,2,1], a[2,3,1], a[2,4,1],
a[2,1,2], a[2,2,2], a[2,3,2], a[2,4,2])
x <- array(1:20, dim=c(4,5))   # Generate a 4 by 5 array.
x
i <- array(c(1:3,3:1), dim=c(3,2))
i                             # i is a 3 by 2 index array.
x[i]                          # Extract those elements
x[i] <- 0                     # Replace those elements by zeros.
x
c(1,2,"1")
c(3,"2","1")
c(3,"2","1")[1]
c(3,2,1)[1]
array(c(1:4),dim=c(2,2))
array(c(1:"4"),dim=c(2,2))
array(c(1:"4"),dim=c(2,2))[1,1]
array(c("1":"4"),dim=c(2,2))[1,1]
array(c("1","2","3",4"),dim=c(2,2))[1,1]
# Matrix ------------------------------------------------------------------
# a matrix is just an array with two subscripts
# List --------------------------------------------------------------------
# an object consisting of an ordered collection of objects known as its components.
# a list could consist of a numeric vector, a logical value, a matrix, a complex vector,
#   a character array, a function, and so on.
array(c("1","2","3","4"),dim=c(2,2))[1,1]
array(c("1","2","3","4"),dim=c(2,2))[1,1]
array(c("1":"4"),dim=c(2,2))[1,1]
Lst <- list(name="Fred", wife="Mary", no.children=3,
child.ages=c(4,7,9))
Lst[1]
Lst[1,2]
Lst[4]
Lst[4][1]
Lst[4][1]
Lst[[4]][1]
Lst[4,1]
source("~/Projects/Ceval/Bayer.R", echo=TRUE)
View(data)
getwd()
